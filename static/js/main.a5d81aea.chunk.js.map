{"version":3,"sources":["components/Header.js","components/Main/MainAnimeQuote.js","components/Main/MainBtnRandom.js","components/Main/Main.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","MainAnimeQuote","randomQuote","quoteLoading","anime","character","quote","MainBtnRandom","setAnimeQuote","onClick","Main","props","state","loading","bind","URL_ANIME_SITE","this","setState","a","fetch","data","json","dataObj","React","Component","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oUAWeA,MARf,WACE,OACE,4BAAQC,UAAU,UAChB,wBAAIA,UAAU,iBAAd,yB,sECOSC,MAVf,YAAwD,IAA9BC,EAA6B,EAA7BA,YAAaC,EAAgB,EAAhBA,aACrC,OACE,6BAASH,UAAS,sBAAiBG,EAAe,GAAK,YACrD,wBAAIH,UAAU,sBAAsBE,EAAYE,OAChD,uBAAGJ,UAAU,0BAA0BE,EAAYG,WACnD,uBAAGL,UAAU,4BAA4BE,EAAYI,S,MCM5CC,MAXf,YAAyD,IAAhCC,EAA+B,EAA/BA,cAAeL,EAAgB,EAAhBA,aACtC,OACE,4BACEH,UAAS,qBAAgBG,EAAe,GAAK,WAC7CM,QAASD,GAFX,WCuDWE,E,kDAtDb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,SAAS,EACTX,YAAa,CACXE,MAAO,QACPC,UAAW,YACXC,MAAO,UAGX,EAAKE,cAAgB,EAAKA,cAAcM,KAAnB,gBACrB,EAAKC,eAAiB,6CAXL,E,qDAejB,OACE,0BAAMf,UAAU,QACd,6BAASA,UAAU,SACjB,wBAAIA,UAAU,gBAAd,uCACA,yBAAKA,UAAU,wBACb,kBAAC,EAAD,CACEE,YAAac,KAAKJ,MAAMV,YACxBC,aAAca,KAAKJ,MAAMC,WAG7B,kBAAC,EAAD,CACEL,cAAeQ,KAAKR,cACpBL,aAAca,KAAKJ,MAAMC,c,sCAOlB,IAAD,OACdG,KAAKC,SAAS,CACZJ,SAAS,IAGX,sBAAC,gCAAAK,EAAA,sEACoBC,MAAM,EAAKJ,gBAD/B,cACOK,EADP,gBAEuBA,EAAKC,OAF5B,OAEOC,EAFP,QAGOhB,EAAQgB,EAAQF,KAAK,KAGzB,EAAKH,SAAS,CACZf,YAAaI,EACbO,SAAS,IARd,0CAAD,O,GAxCeU,IAAMC,W,MCMVC,MARf,WACE,OACE,4BAAQzB,UAAU,UAChB,uBAAGA,UAAU,qBAAb,eCYS0B,MAVf,WACE,OACE,yBAAK1B,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCDc2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a5d81aea.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../scss/header.scss';\r\n\r\nfunction Header() {\r\n  return (\r\n    <header className=\"header\">\r\n      <h1 className=\"header__title\">Random Anime Quotes</h1>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport '../../scss/mainAnimeQuote.scss';\r\n\r\nfunction MainAnimeQuote({ randomQuote, quoteLoading }) {\r\n  return (\r\n    <article className={`anime-quote ${quoteLoading ? '' : 'loading'}`}>\r\n      <h2 className=\"anime-quote__title\">{randomQuote.anime}</h2>\r\n      <p className=\"anime-quote__character\">{randomQuote.character}</p>\r\n      <p className=\"anime-quote__description\">{randomQuote.quote}</p>\r\n    </article>\r\n  );\r\n}\r\n\r\nexport default MainAnimeQuote;\r\n","import React from 'react';\r\nimport '../../scss/randomBtn.scss';\r\n\r\nfunction MainBtnRandom({ setAnimeQuote, quoteLoading }) {\r\n  return (\r\n    <button\r\n      className={`btn-random ${quoteLoading ? '' : 'loading'}`}\r\n      onClick={setAnimeQuote}\r\n    >\r\n      Random\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default MainBtnRandom;\r\n","import React from 'react';\r\nimport '../../scss/main.scss';\r\nimport MainAnimePost from './MainAnimeQuote';\r\nimport MainBtnRandom from './MainBtnRandom';\r\n\r\nclass Main extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      loading: true,\r\n      randomQuote: {\r\n        anime: 'Anime',\r\n        character: 'Character',\r\n        quote: 'Quote',\r\n      },\r\n    };\r\n    this.setAnimeQuote = this.setAnimeQuote.bind(this);\r\n    this.URL_ANIME_SITE = 'https://animechanapi.xyz/api/quotes/random';\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <main className=\"main\">\r\n        <section className=\"intro\">\r\n          <h2 className=\"intro__title\">Ð¡lick to generate random quote</h2>\r\n          <div className=\"intro__quote-wrapper\">\r\n            <MainAnimePost\r\n              randomQuote={this.state.randomQuote}\r\n              quoteLoading={this.state.loading}\r\n            />\r\n          </div>\r\n          <MainBtnRandom\r\n            setAnimeQuote={this.setAnimeQuote}\r\n            quoteLoading={this.state.loading}\r\n          />\r\n        </section>\r\n      </main>\r\n    );\r\n  }\r\n\r\n  setAnimeQuote() {\r\n    this.setState({\r\n      loading: false,\r\n    });\r\n\r\n    (async () => {\r\n      const data = await fetch(this.URL_ANIME_SITE);\r\n      const dataObj = await data.json();\r\n      const quote = dataObj.data[0];\r\n\r\n      if (quote) {\r\n        this.setState({\r\n          randomQuote: quote,\r\n          loading: true,\r\n        });\r\n      }\r\n    })();\r\n  }\r\n}\r\n\r\nexport default Main;\r\n","import React from 'react';\r\nimport '../scss/footer.scss';\r\n\r\nfunction Footer() {\r\n  return (\r\n    <footer className=\"footer\">\r\n      <p className=\"footer__copyright\">&copy; 2020</p>\r\n    </footer>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","import React from 'react';\nimport 'normalize.css';\nimport './scss/app.scss';\n\nimport Header from './components/Header';\nimport Main from './components/Main/Main';\nimport Footer from './components/Footer';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Header />\n      <Main />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}